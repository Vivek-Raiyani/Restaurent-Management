@{
    ViewData["Title"] = "Iteams";
    Layout = "_adminlayout";
}
<link rel="stylesheet" href="~/css/menu.css" asp-append-version="true" />


<div class="container mt-5">
    <h3 class="text-primary mb-3"><strong>Menu</strong></h3>

    <!--nav tabs-->
    <div class="p-2 mb-3 tile">

        <button class="btn " id="ItemTab" type="button">Iteams</button>
        <button class="btn " id="ModifierTab" type="button">Modifiers</button>

    </div>

    <div>

        <div class="row gx-3 gx-lg-5 m-0 tile">
            @* menuside bar code here *@
                <div id="MenuSidebar" class="col-lg-3 pt-4 border-end" >
            </div>

            @* menu table code here *@
            <div class="col-lg-9">
                <div id="Menutable">
                </div>
            </div>

        </div>
    </div>
</div>

<div id="MenuModals"></div>

<!-- Modal -->
<div class="modal fade" id="SingleDeleteModal" tabindex="-1" aria-labelledby="SingleDeleteModalLabel">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="SingleDeleteModalLabel">Delete Confirmation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center d-block">
                <img src="~/images/warning-icon.svg" alt="warning" width="50px">
                <p>Are you sure you want to delete  ?</p>
            </div>
            <div class="modal-footer justify-content-center">
                <button type="submit" id="MenuDeleteBtn" class="btn btn-primary" data-bs-dismiss="modal">Yes</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">No</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>

        function GetSideBarAfterUpdate(url, selected) {
            console.log("method called")
            $.ajax({
                url: url,
                type: "GET",
                success: function (response) {
                    $('#MenuSidebar').html(response);
                    if (selected != 0) {
                        console.log($(`.categorybtn[data-id=${selected}]`));
                        $(`.categorybtn[data-id=${selected}]`).children(".nav-link").addClass("active").click();
                        $(`.modifierbtn[data-id=${selected}]`).children(".nav-link").addClass("active").click();
                    } else {
                        $(".categorybtn:first").children(".nav-link").addClass("active").click();
                        $(".modifierbtn:first").children(".nav-link").addClass("active").click();
                    }

                },
                error: function (request, status, error) {
                    alert(request.responseText);
                }
            });
        }


        $(document).ready(function () {
            console.log("Dom loaded successfully");
            let modifierselected = [];
            let modifierpresent = [];


            function GetSideBar(url) {
                $.ajax({
                    url: url,
                    type: "GET",
                    success: function (response) {
                        $('#MenuSidebar').html(response);
                        console.log($(".categorybtn:first").children(".nav-link"))
                        $(".categorybtn:first").children(".nav-link").addClass("active").click();
                        $(".modifierbtn:first").children(".nav-link").addClass("active").click();
                    },
                    error: function (request, status, error) {
                        alert(request.responseText);
                    }
                });
            }


            function GetGroups(url) {
                $.ajax({
                    url: url,
                    type: "GET",
                    success: function (response) {
                        console.log(response);
                        return response;
                    },
                    error: function (request, status, error) {
                        alert(request.responseText);
                    }
                });
            }

            function GetTableView(url, data) {
                $.ajax({
                    url: url,
                    type: "GET",
                    data: data,
                    success: function (response) {
                        $('#Menutable').html(response);
                    },
                    error: function (request, status, error) {
                        alert(request.responseText);
                    }
                });
            }

            function GetModal(url, data = {}) {
                $.ajax({
                    url: url,
                    type: "GET",
                    data: data,
                    success: function (response) {

                        $('#MenuModals').html(response);
                        $("#addeditmodal").modal("show");

                        console.log($(".existsModifier"));
                        $(".existsModifier").children().each(function () {
                            let element = $(this).children().children(".selectedmodifier");
                            modifierpresent.push({ "Id": element.data("id"), "Name": element.html(), "MappingId": element.data("mappingid") })
                            console.log(modifierpresent);
                        })
                        console.log(modifierpresent);
                    },
                    error: function (request, status, error) {
                        alert(request.responseText);
                    }
                });
            }

            function DataSubmit(url, data = {}, seleted, type) {
                console.log(data)
                console.log(seleted, type)
                $.ajax({
                    url: url,
                    type: "POST",
                    contentType: false,
                    processData: false,
                    data: data,
                    success: function (response) {
                        console.log(response);

                        if (response.succes) {
                            toastr.success(response.message);
                        }
                        else {
                            toastr.error(response.message);
                        }

                        if (seleted > 0) {
                            if (type == "category") {
                                console.log("category calld")
                                let url = "/Menu/ItemSidebar";
                                GetSideBarAfterUpdate(url = url, seleted = seleted);
                            } else {
                                console.log("group calld")
                                let url = "/Menu/ModifierGroupSidebar"
                                GetSideBarAfterUpdate(url = url, seleted = seleted);
                            }

                        }
                    },
                    error: function (request, status, error) {
        @* alert(request.responseText); *@
                            console.log(request)
                        toastr.error(request.responseJSON.error)
                    }
                });
            }





            // side bar  script start
            $("#ModifierTab").on("click", () => {
                console.log("calling modifier sidebar")
                GetSideBar("/Menu/ModifierGroupSidebar");
                $("#ModifierTab").attr("disabled", true).addClass("btn-primary");
                $("#ItemTab").removeAttr("disabled").removeClass("btn-primary");
                $(".modifierbtn:first").click();
            });

            $("#ItemTab").on("click", () => {
                console.log("calling Category sidebar")
                GetSideBar("/Menu/ItemSidebar");
                $("#ItemTab").attr("disabled", true).addClass("btn-primary");
                $("#ModifierTab").removeAttr("disabled").removeClass("btn-primary");
            });
            // side bar script end
            console.log("call the sidebar of category by default");
            $("#ItemTab").click();



            // table data  script start
            $(document).on("click", ".categorybtn", function () {
                console.log("calling data for category with id=", $(this).data("id"));
                let url = "/Menu/ItemTable";
                let data = { "categoryid": $(this).data("id"), "pagesize": 3 };
                GetTableView(url, data);
            });

            $(document).on("change", ".navigation-list-category", function () {
                console.log("calling data for category with id=", $(this).val());
                let url = "/Menu/ItemTable";
                let data = { "categoryid": $(this).val(), "pagesize": 3 };
                GetTableView(url, data);
            });

            $(document).on("click", ".modifierbtn", function () {
                console.log("calling data for group with id=", $(this).data("id"));
                let url = "/Menu/ModifierTable";
                let data = { "groupid": $(this).data("id"),"pagesize": 3  };

                GetTableView(url, data);
            })

            $(document).on("change", ".navigation-list-modifier", function () {
                console.log("calling data for group with id=", $(this).val());
                let url = "/Menu/ModifierTable";
                let data = { "groupid": $(this).val(),"pagesize": 3 };

                GetTableView(url, data);
            })
            // table data script end









            // Add Edit Category  script
            $(document).on("click", "#addcategory", function () {
                console.log("--- Add category modal clicked ---");
                let url = "/Menu/AddEditCategory";
                GetModal(url = url);
                setTimeout(function () { $("#Modal-heading").html("Add Category"); }, 100);
                console.log("---------------------")
            });

            $(document).on("click", ".editcategorymodel", function () {
                console.log("--- edit category modal clicked ---");
                let url = "/Menu/AddEditCategory";
                let data = { "categoryid": $(this).data("id") }
                GetModal(url = url, data = data);
                setTimeout(function () { $("#Modal-heading").html("Edit Category"); }, 100);
            });

            $(document).on("click", "#SelectedEditCategory", function () {
                console.log("--- edit category modal clicked ---");
                let url = "/Menu/AddEditCategory";
                let data = { "categoryid": $('.navigation-list-category').val() }
                GetModal(url = url, data = data);
            });

            $(document).on("submit", "#categoryform", function () {
                event.preventDefault(); // Prevent the form from submitting and reloading the page
                console.log("categorydata submitting");
                let url = "/Menu/AddEditCategory";
                let form = $("#categoryform");
                let data = new FormData(form[0]);
                data["CategoryID"] = $("#editcategory").val();
                for (const pair of data.entries()) {
                    console.log(pair[0], pair[1]);
                }
                let type = "category"
                let seleted = $(".active").parent().data("id");
                console.log(seleted);
                if (seleted == undefined || seleted == NaN) {
                    seleted = 0;
                }
                DataSubmit(url = url, data = data, seleted = seleted, type = type);
                $("#addeditmodal").modal('hide');
            })

            // Add Edit Script end

            // Add Edit Item script
            function GetModiferGroupMapping() {
                let mappingobject = [];
                $(".modifergroupdisplay").each(function () {
                    let id = $(this).data("id");
                    let mappingid = parseInt($(`#mapping${id}`).html());
                    let min = parseInt($(`#minimum${id}`).val());
                    let max = parseInt($(`#maximum${id}`).val());
                    console.log(min, max)
                    mappingobject.push(
                        { "Mappingid": mappingid, "GroupId": id, "Min": min, "Max": max }
                    )
                })
                console.log(mappingobject);
                return mappingobject;
            }


            $(document).on("click", "#AddItem", function () {
                console.log("--- Add item modal clicked ---");
                let url = "/Menu/AddEditItem";
                GetModal(url = url);
                setTimeout(function () { $("#Modal-heading").html("Add Item"); }, 100);

            });

            $(document).on("click", ".EditItem", function () {
                console.log("--- edit item modal clicked ---");
                let url = "/Menu/AddEditItem";
                let data = { "itemid": $(this).data("id") }
                GetModal(url = url, data = data);
                setTimeout(function () { $("#Modal-heading").html("Edit Item"); }, 100);
            });

            $(document).on("submit", "#ItemFormData", function () {
                console.log("999999999999999999999999999999999")
                event.preventDefault(); // Prevent the form from submitting and reloading the page
                let url = "/Menu/AddEditItem";
                let mappings = GetModiferGroupMapping();
                console.log("itemdata submitting");
                $("#addeditmodal").modal('hide');
                let form = $("#ItemFormData");
                let data = new FormData(form[0]);
                data.append("GroupString", JSON.stringify(mappings));
                for (const pair of data.entries()) {
                    console.log(pair[0], pair[1]);
                }
                console.log(data)

                let type = "category"
                let seleted = $(".active").parent().data("id");
                console.log(seleted);
                if (seleted == undefined || seleted == NaN) {
                    seleted = 0;
                }
                DataSubmit(url = url, data = data, seleted = seleted, type = type);
        @* DataSubmit(url = url, data = data) *@
                        })



            // Add Edit Script end


            // Add Edit group  script

            // ---- handling modifer checkbox in modal
            function GetCheckedModifer() {
                modifierselected = [];
                $(".ModiferSelectCheck:checked").each(function () {
                    let id = $(this).data("id");
                    let name = $(this).data("name");
                    let mappingid = $(this).data("mappingid");
                    if (mappingid == undefined) {
                        mappingid = 0;
                    }
                    let selected = { "Id": id, "Name": name, "MappingId": mappingid };

                    modifierselected.push(selected);
                })
                console.log(modifierselected);
                return modifierselected;
            }


            // ---- addedit modal open
            // add modifier group modal
            $(document).on("click", "#addmodifergroupbtn", function () {
                console.log("--- Add group modal clicked ---");
                let url = "/Menu/AddEditModifierGroup";
                GetModal(url = url);
                setTimeout(function () { $("#Modal-heading").html("Add Group"); }, 100);
            });

            // edit modifer group modal
            $(document).on("click", ".EditModifierClass", function () {
                console.log("--- edit group modal clicked ---");
                let url = "/Menu/AddEditModifierGroup";
                let data = { "groupid": $(this).data("id") }
                GetModal(url = url, data = data);
                setTimeout(function () { $("#Modal-heading").html("Edit Group"); }, 100);
            });

            $(document).on("click", "#SelectedEditModifer", function () {
                console.log("--- edit group modal clicked ---");
                let url = "/Menu/AddEditModifierGroup";
                let data = { "groupid": $('.navigation-list-modifier').val() }
                GetModal(url = url, data = data);
            });


            let modifer_checked = new Set();
            let modifier_List = [];

            // --- exsisting modifier modal open
            $(document).on('click', ".AddExistingModifier", function () {
                // rechecking the exisiting modifiers
                modifierpresent = [];
                $(".existsModifier").children().each(function () {
                    let element = $(this).children().children(".selectedmodifier");
                    modifierpresent.push({ "Id": element.data("id"), "Name": element.html(), "MappingId": element.data("mappingid") })
                    console.log(modifierpresent);
                })
                console.log('btn clicked=-=-=--=-=-=-=-=-=');
                var url = "/Menu/ExistingModifierTable";
                console.log(url);
                $.ajax({
                    url: url,
                    type: "POST",
                    success: function (response) {
                        $('#AddExistingModifierModel').html(response);
                        $('#ModiferModal').modal('show');

                        // to check the checkbox of modifier present this is only need for first time
                        modifierpresent.forEach(function (mod) {
                            console.log(modifer_checked);
                            console.log("loop rning", mod.Id);
                            $(`.ModiferSelectCheck[data-id='${mod.Id}']`).prop("checked", true);
                            modifer_checked.add(mod.Id);
                        });
                        // to check the checkbox of modifier present after wards it does all work
                        setTimeout(function () {
                            modifer_checked.forEach(function (mod) {
                                let checkbox = $(`.ModiferSelectCheck[data-id='${mod}']`);
                                console.log(checkbox);
                                checkbox.prop("checked", true);
                            });
                        }, 100);
                    },
                    error: function (request, status, error) {
                        alert(request.responseText);
                    }
                });
            });
            console.log(modifer_checked);

            // ---- adds modifer sleced in the existing modal to addedit modal
            $(document).on("click", "#AddSelectedModifier", function () {
                console.log(modifier_List);
                let selectedmod = modifier_List;
                // remove the one which is in set
                modifierpresent.forEach(function (mod) {
                    selectedmod = selectedmod.filter(item => item.Id != mod.Id);
                });
                let modifierdisplay = ``;
                modifierpresent.forEach(function (mod) {
                    if (modifer_checked.has(mod.Id)) {
                        modifierdisplay += `<div class="col-lg-3 col-md-4 col-sm-6">
                                                                                                                                <div class="d-flex justify-content-between"> 
                                                                                                                                    <p class="selectedmodifier m-0" data-id=${mod.Id} data-mappingid=${mod.MappingId}> ${mod.Name} </p>
                                                                                                                                    <button class="btn removeselectedmodifier p-0" data-id="${mod.Id}" data-mappingid="${mod.MappingId}"><i class="bi bi-trash"></i></button>
                                                                                                                                </div>
                                                                                                                            </div>`
                    }
                });
                selectedmod.forEach(function (mod) {
                    if (modifer_checked.has(mod.Id)) {
                        modifierdisplay += `<div class="col-lg-3 col-md-4 col-sm-6">
                                                                                                                                <div class="d-flex justify-content-between"> 
                                                                                                                                    <p class="selectedmodifier m-0" data-id=${mod.Id} data-mappingid=${mod.MappingId}> ${mod.Name} </p>
                                                                                                                                    <button class="btn removeselectedmodifier p-0"><i class="bi bi-trash"></i></button>
                                                                                                                                </div>
                                                                                                                            </div>`
                    }
                });
                $(".existsModifier").html(modifierdisplay);
            });

            // handels the unclecking of modifer in the modal to addedit modal
            $(document).on("change", ".ModiferSelectCheck", function () {
                if ($(this).is(":checked")) {
                    modifer_checked.add($(this).data("id"));
                    let id = $(this).data("id");
                    let name = $(this).data("name");
                    let mappingid = 0;
                    let selected = { "Id": id, "Name": name, "MappingId": mappingid };
                    modifier_List.push(selected);
                    console.log(modifer_checked)
                    console.log(modifier_List);
                } else {
                    modifer_checked.delete($(this).data("id"));
                    modifier_List = modifier_List.filter(x => modifer_checked.has(x.Id))
                    console.log(modifer_checked);
                }
            })

            // ---- remove the modifer display from addedit modal
            $(document).on("click", ".removeselectedmodifier", function () {
                debugger
                console.log($(this))
                console.log("0-0-0-0")
                let mappingid = $(this).data("mappingid");
                console.log(mappingid)
                if (mappingid != undefined) {
                    console.log(modifierpresent)
                    modifierpresent = modifierpresent.filter(mod => mod.MappingId == mappingid)
                    console.log(modifierpresent)
                }
                $(this).parent().parent().remove();
            })


            // handling the checkbox select inside modal
            $(document).on("click", '.previous_page_Modal,.next_page_Modal', function () {
                setTimeout(function () {
                    modifer_checked.forEach(function (mod) {
                        let checkbox = $(`.ModiferSelectCheck[data-id='${mod}']`);
                        console.log(checkbox);
                        checkbox.prop("checked", true);
                    });
                }, 100);


            })

            // handling the checkbox select inside modal
            $(document).on("change", '.pagesizeModal , .Modifier-search-Modal', function () {
                setTimeout(function () {
                    modifer_checked.forEach(function (mod) {
                        let checkbox = $(`.ModiferSelectCheck[data-id='${mod}']`);
                        console.log(checkbox);
                        checkbox.prop("checked", true);
                    });
                }, 100);
            })


            $(document).on("click", "#all-iteam", function () {
                if ($(this).is(":checked")) {
                    $(".ModiferSelectCheck").each(function () {
                        if (!$(this).is(":checked")) {
                            $(this).click();
                        }
                    });
                } else {
                    $(".ModiferSelectCheck").each(function () {
                        if ($(this).is(":checked")) {
                            $(this).click();
                        }
                    });
                }
            });


            $(document).on("submit", "#add-modifier-group-form", function () {
                event.preventDefault(); // Prevent the form from submitting and reloading the page
                let url = "/Menu/AddEditModifierGroup";
                console.log("groupdata submitting");
                let modiferList = [];// mappingid name id
                $(".selectedmodifier").each(function () {
                    modiferList.push({ "MappingId": $(this).data("mappingid"), "Name": $(this).data("name"), "Id": $(this).data("id") })
                })
                console.log(modiferList);
                let form = $("#add-modifier-group-form");
                let data = new FormData(form[0]);
                data.append("ModifierString", JSON.stringify(modiferList));
                let type = "group"
                let seleted = $(".active").parent().data("id");
                console.log(seleted);
                if (seleted == undefined || seleted == NaN) {
                    seleted = 0;
                }
                DataSubmit(url = url, data = data, seleted = seleted, type = type);
            })


            // Add Edit Script end


            // Add Edit modifier script
            $(document).on("click", "#AddModifierBtn", function () {
                console.log("--- Add modifier modal clicked ---");
                let url = "/Menu/AddEditModifier";
                GetModal(url = url);
                setTimeout(function () { $("#Modal-heading").html("Add Modifier"); }, 100);
            });

            $(document).on("click", ".EditModifier", function () {
                console.log("--- edit modifier modal clicked ---");
                let url = "/Menu/AddEditModifier";
                let data = { "modifierid": $(this).data("id") }
                GetModal(url = url, data = data);
                setTimeout(function () { $("#Modal-heading").html("Edit Modifier"); }, 100);
            });


            $(document).on("submit", "#addeditmodiferform", function () {
                event.preventDefault(); // Prevent the form from submitting and reloading the page
                console.log("modiferdata submitting");
                let url = "/Menu/AddEditModifier";
                let groupids = [];
                $('.modifier-group-check:checked').each(function () {
                    groupids.push(parseInt($(this).val()));
                })
                let groupstr = JSON.stringify(groupids)
                console.log(groupstr);
                console.log(groupids);
                let form = $("#addeditmodiferform");
                let data = new FormData(form[0]);
                data.append("GroupStr", groupstr);
                for (const pair of data.entries()) {
                    console.log(pair[0], pair[1]);
                }

                let type = "group"
                let seleted = $(".active").parent().data("id");
                console.log(seleted);
                if (seleted == undefined || seleted == NaN) {
                    seleted = 0;
                }
                DataSubmit(url = url, data = data, seleted = seleted, type = type);
        @* DataSubmit(url = url, data = data) *@
                        })
            // Add Edit Script end



        });

        // delete Script
        $(document).on("click", ".delcategory , .DeleteModifierClass , .DeleteItemModal , .DeleteModifier", function () {
            let name = $(this).data("name");
            let ids = [];
            ids.push($(this).data("id"));
            let data = { "Name": name, "Ids": ids }

            $("#MenuDeleteBtn").data("values", JSON.stringify(data));
            console.log($("#MenuDeleteBtn").data("values"));
        });

        $(document).on("click", "#SelectedDeleteCategory", function () {
            let ids = [];
            ids.push($(".navigation-list-category").val());
            let data = { "Name": 'category', "Ids": ids }

            $("#MenuDeleteBtn").data("values", JSON.stringify(data));
            console.log($("#MenuDeleteBtn").data("values"));
        });

        $(document).on("click", "#SelecteDeleteModifier", function () {
            let ids = [];
            ids.push($(".navigation-list-modifier").val());
            let data = { "Name": 'group', "Ids": ids }

            $("#MenuDeleteBtn").data("values", JSON.stringify(data));
            console.log($("#MenuDeleteBtn").data("values"));
        });

        let itemcheckarr = new Set();
        $(document).on("click", ".itemcheck", function () {
            if ($(this).is(":checked")) {
                itemcheckarr.add($(this).data("id"));
            } else {
                itemcheckarr.delete($(this).data("id"));
            }
            console.log(itemcheckarr)
        });
        $('.itemcheck').each(function () {
            if (!$(this).is(":checked")) {
                if (itemcheckarr.has($(this).data("id"))) {
                    $(this).click();
                }
            }
        })

        let modifiercheckarr = new Set();
        $(document).on("click", ".modiferitem", function () {
            if ($(this).is(":checked")) {
                modifiercheckarr.add($(this).data("id"));
            } else {
                modifiercheckarr.delete($(this).data("id"));
            }
            console.log(modifiercheckarr)
        });

        $('.modiferitem').each(function () {
            if (!$(this).is(":checked")) {
                if (itemcheckarr.has($(this).data("id"))) {
                    $(this).click();
                }
            }
        })

        $(document).on("click", ".MassDeleteBtn", function () {
            let name = $(this).data("name");
            let ids = [];
            if (name == "item") {
        @* ids= Array.from(itemcheckarr); *@
                    $(".itemcheck:checked").each(function () {
                        ids.push($(this).data("id"));
                    });
            } else {
        @* ids= Array.from(modifiercheckarr); *@
                    $(".modiferitem:checked").each(function () {
                        ids.push($(this).data("id"));
                    });
            }
            let data = { "Name": name, "Ids": ids }
            console.log(data);

            $("#MenuDeleteBtn").data("values", JSON.stringify(data));
            console.log($("#MenuDeleteBtn").data("values"));
        });

        $(document).on("click", "#MenuDeleteBtn", function () {
            let url = "/Menu/Delete";
            let data = JSON.parse($(this).data("values"));
            console.log(data);
            $.ajax({
                url: url,
                type: "DELETE",
                data: data,
                success: function (response) {
                    console.log(response);
                    if (response.succes) {
                        toastr.success(response.message);
                    }
                    else {
                        toastr.error(response.message);
                    }
                    let url = ""
                    if (data.Name == "category") {
                        url = "/Menu/ItemSidebar";
                        GetSideBarAfterUpdate(url = url, selected = 0);
                    } else if (data.Name == "group") {
                        url = "/Menu/ModifierGroupSidebar"
                        GetSideBarAfterUpdate(url = url, selected = 0);
                    }
                    else if (data.Name == "item") {
                        url = "/Menu/ItemSidebar";
                        let seleted = $(".active").parent().data("id");
                        console.log(seleted);
                        if (seleted == undefined || seleted == NaN) {
                            seleted = 0;
                        }
                        GetSideBarAfterUpdate(url = url, selected = seleted);
                    } else {
                        url = "/Menu/ModifierGroupSidebar"
                        let seleted = $(".active").parent().data("id");
                        console.log(seleted);
                        if (seleted == undefined || seleted == NaN) {
                            seleted = 0;
                        }
                        GetSideBarAfterUpdate(url = url, selected = seleted);
                    }


                },
                error: function (request, status, error) {
                    console.log(request.responseJSON)
                    toastr.error(request.responseJSON.error)
        @* alert(request.responseText); *@
                                                }
            });
            modifiercheckarr.clear();
            itemcheckarr.clear();
        })

        // script end
    </script>
}
